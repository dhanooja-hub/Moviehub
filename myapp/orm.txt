class Movie(models.Model):
    title=models.Charfield

orm query for creating movie object

>Movie.objects.create(title="premalu",year="2024",director="gireesh",run_time="200",language="malayalam",genre="comedy")

>qs=Movie.objects.all()
    
fetch movie objects whose genre=romantic

>qs=Movie.objects.filter(genre="romantic)
    
>qs=movie.objects.filter(language="malayalam")

malayalam comedymovies
>qs=Movie.objects.filter(language="malayalam")

fetch movies released after 20000
>qs=Employee.objects.filter(department="hr")

**fetch all moviewith longest run_time
qs=Movie.objects.values("run_time").aggregate(longest=Max("run_time"))
data=Movie.objects.filter(run_time=qs.get("longest"))

***group movie with genre
qs=Movie.objects.values("genre").annotate(summary=Count("genre"))
***group movie with language
Movie.objects.values("language").annotate(summary=Count("language"))

>__gt greaterthan
>__lt lessthan
>__gte greaterthanequalto
>__lte lessthanequalto

malayalam movies after 2018
qs=Movie.objects.filter(year__gt=2018,language="malayalam")

orm query for creating object employee
class Employee(models.Model):
    title=models.Charfield
>>
qs=Employee.objects.get(id=1)

>>filtering department querysets
qs=Employee.objects.filter(department="hr")

>>salary greaterthan 45000
qs=Employee.objects.filter(salary__gt=45000)

>>__iexact= (casesensitive) 
filter employess whose place=ThRissur
qs=Employee.objects.filter(location__iexact="ThRissur")

>>__icontains 
filter employees whoose name letter conatins ab
qs=Employee.objects.filter(name__icontains="ab")

__in
>>filter all employee in hr and finance in department
qs=Employee.objects.filter(department__in=["hr","finance"])

update orm queryupdate
updatejob
>>Employee.objects.filter(id=3).update(department="ceo",salary=200000)

delete orm query
>>Employee.objects.filter(id=2).delete()

aggregate functions(max,min,avg,count,sum)

fetching all department
Employee.objects.values(column name)
Employee.objects.values("department")
Employee.objects.values_list("department")
<QuerySet [('hr',), ('ceo',), ('hr',), ('sales',), ('finance',)]>

> Employee.objects.values_list("department",flat=True)
<QuerySet ['hr', 'ceo', 'hr', 'sales', 'finance']>

Employee.objects.values_list("department",flat=True).distinct()
<QuerySet ['hr', 'ceo', 'sales', 'finance']>

sorting query
sorting employee with salary

asending
qs=Employee.objects.all().order_by("salary")

decending
qs=Employee.objects.all().order_by("-salary")

aggregate orm query
(max,count,min,avg,sum)
from django.db.models import Max
max_salary=Employee.objects.aggregate(Max("salary"))